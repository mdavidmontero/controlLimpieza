generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String            @id @default(uuid())
  name        String
  email       String
  password    String
  confirmed   Boolean
  role        Role              @default(USER)
  token       String            @default("")
  image       String?
  cargo       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  attendances Attendance[]
  visitCenter SolicitudVisita[]
}

model Attendance {
  id                   String    @id @default(uuid())
  userId               String
  date                 DateTime
  morningIn            DateTime?
  morningOut           DateTime?
  afternoonIn          DateTime?
  afternoonOut         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  afternoonInLocation  Json?
  afternoonOutLocation Json?
  morningInLocation    Json?
  morningOutLocation   Json?
  anotacionesAfternoon String?
  anotacionesMorning   String?
  user                 User      @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

enum Role {
  USER
  ADMIN
  COORDINACIONTECNICA
  CALIDAD
  ADMINISTRATIVA
  BODEGA
  SISTEMAS
  LIMPIEZA
  CONTABILIDAD
  TRABAJADORES
}

// Limpieza de centro de acopio
model LimpiezaAcopio {
  id                  Int      @id @default(autoincrement())
  userId              String
  date                DateTime
  baños              Boolean?
  zonaSecadoras       Boolean?
  patiosMarquesinas   Boolean?
  oficinas            Boolean?
  recepcion           Boolean?
  cafetería          Boolean?
  labcacao            Boolean?
  labcafe             Boolean?
  labrones            Boolean?
  casahospedaje       Boolean?
  aspirado            Boolean?
  limpiezapisos       Boolean?
  dispobasuras        Boolean?
  barridopisos        Boolean?
  limpiezasuperficies Boolean?
  lavadosuperficies   Boolean?
  lavadoparedes       Boolean?
  lavadopisos         Boolean?
  controlplagas       Boolean?
  limpiezaparedes     Boolean?
  responsable         String
  insumosutilizados   String
  imagenes            Json?
}

model TrampasPegajosas {
  id              Int       @id @default(autoincrement())
  fecha           DateTime
  lugarcolocacion String?
  tipotrampa      String?
  cantidadtrampas String?
  plagamonitor    String?
  fecharecambio   DateTime?
  imagenes        Json?
  responsable     String
}

enum controlPlagas {
  PREVENTIVO
  CORRECTIVO
}

model LimpiezaSilo {
  id                  Int           @id @default(autoincrement())
  userId              String
  date                DateTime
  silouno             Boolean?
  silodos             Boolean?
  clasificadoragranos Boolean?
  patiossecado        Boolean?
  otraarea            String?
  barridoaspirado     Boolean?
  otrasintervenciones String?
  controlplagas       controlPlagas
  insumosutilizados   String
  observaciones       String
  responsable         String
}

enum Estado {
  BUENO
  REGULAR
  MALO
  DESARMADO
}

enum Mantenimiento {
  PREVENTIVO
  CORRECTIVO
  INSTALACION
  DESMONTAJE
}

model MantemientoEquipos {
  id                     Int           @id @default(autoincrement())
  fecharealizado         DateTime
  nombre                 String
  marca                  String
  modelo                 String
  nroserie               String?
  fechacompra            DateTime
  nroplaca               String?
  referencia             String?
  potencia               String?
  area                   String
  estado                 Estado
  descripcionsituacion   String
  mantenimiento          Mantenimiento
  descripcionmantemiento String
  falla                  String
  descripcionfalla       String
  proximomantenimiento   DateTime
  motivomantenimiento    String
  tecnico                String
  responsable            String
}

enum Evaluacion {
  PENDIENTE
  APROBADO
  RECHAZADO
}

model SolicitudVisita {
  id              Int               @id @default(autoincrement())
  municipio       String
  dia             String
  mes             String
  anio            String
  nombres         String
  empresa         String
  area            String
  email           String
  telefono        String
  fechaVisitaDia  String
  fechaVisitaMes  String
  fechaVisitaAnio String
  horaInicio      String
  horaFin         String
  dependencia     String
  objeto          String
  material        String
  evaluacion      Evaluacion        @default(PENDIENTE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  documentVisit   String?
  asistentes      AsistenteVisita[]
  userId          String
  user            User              @relation(fields: [userId], references: [id])
}

model AsistenteVisita {
  id              Int    @id @default(autoincrement())
  nombres         String
  tipoDocumento   String
  numeroDocumento String
  dependencia     String

  solicitudId Int
  solicitud   SolicitudVisita @relation(fields: [solicitudId], references: [id], onDelete: Cascade)
}
